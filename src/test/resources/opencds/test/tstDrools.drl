package opencds.test;

import kb.tester.Patient;
import kb.tester.Problem;
import java.util.HashSet;

global java.util.List counter;

/*
declare Person
    name : String
    age : Integer
end

declare trait WorkProfile
    id : String
    salary : Double
end

declare trait StudentWorker extends WorkProfile
    sid : String
    major : String
end

declare trait Worker extends WorkProfile
    ssn : String
    expertize : String
end

rule "test person 1"
salience 100
when
then
    insert(new Person());
end

rule "test person 2"
salience 10
no-loop
when
    $p : Person()
then
    //modify($p){ setName("Mohammad"), setAge(25) };
    $p.setName("Mohammad");
    $p.setAge(25);
    update($p);
end

rule "test person 3"
salience 0
no-loop
when
    $p : Person($age : age > 20)
then
    Worker w = don( $p, Worker.class);
    System.out.println( "name: " + $p.getName() + " age: " + $p.getAge() );
    System.out.println("worker: " + w);
end

*/


/*
declare Person
    @Traitable

    name    : String       = "john"     @key

    age     : int          = 18

    weight  : Double       = 75.4

end


declare trait IPerson

    name    : String

    age     : int

    weight  : Double

end


declare trait Student extends IPerson

    school  : String
end


declare trait Worker extends IPerson

    wage    : int
end


rule "Zero"
when
then
    insert( new Person() );
end


rule "Student and Worker"
no-loop
when
    $p : Person( $age : age < 25 )
then
    Worker  w = don( $p, Worker.class, false );
    Student s = don( $p, Student.class );
end

rule "Work too hard"
when
    $s : Student( this isA Worker, $age : age < 25 )
then
    System.out.println( " The toll of toil ");
    $s.setAge( 75 );
    update( $s );
end

rule "Too old for school and all"
when
    $w : Worker( this isA Student, $age : age > 60 )
then
    System.out.println( " Student (no more) at " + $age );
    shed( $w, Worker.class );
end

rule "Is it still a Student"
when
    $s : Student( this not isA Worker, $age : age )
then
    System.out.println( "Still Student but no longer remains ");
    shed( $s, Student.class );
end

rule "Is it still a Person"
when
    $p : Person()
then
    System.out.println("There exists a person: " + $p );
end
*/

/*
rule "patient problems List"
when
    $p : Patient()
then
    System.out.println("Patient: [" + $p.name + "]" );
    $p.printProblemsList();
end

rule "patient check 1"
when
    $p : Patient()
    $ds : HashSet() from collect( Problem(getSeverity() == Severity.LOW)  from $p.problems )
then
    System.out.println("Selected severity <LOW>:");
    for(Object pr : $ds){
        System.out.println(((Problem)pr).getProblemName());
    }
end

rule "test timer 1"
    timer ( int:2s 2s )
when
then
    System.out.println("hello");
    counter.add((int)(System.currentTimeMillis()/1000));
end
*/



declare CPatient1 //extends Patient
@Traitable
    ID : Integer
end

declare trait MinorThreatPatient //extends CPatient1
@propertyReactive
    name : String
    ThreatName: String
    ID : Integer
end

declare trait composeMinorThreatPatient
@propertyReactive
    minorTP : MinorThreatPatient
end

rule "Zero"
salience 100
when
then
    insert( new CPatient1() );
end

rule "done 1"
no-loop
when
    $obj : CPatient1()
then
    MinorThreatPatient x = don( $obj , MinorThreatPatient.class);
end

rule "done 2"
when
    $obj : MinorThreatPatient()
then
    modify($obj){
        setName("XYZ"),
        setID(100);
    }
    System.out.println($obj);
    System.out.println("done 2...");
end

//////////////////////
declare C1
    c1 : String = "salam"
end
declare C2
    c2 : String = "dorood"
end

declare trait T1
@propertyReactive
    c1 : String
end
declare trait T2
@propertyReactive
    c2 : String
end

rule "initialization"
no-loop
when
then
    C1 c = new C1();
    c.setC1("changed");
    insert( c );
    //insert( new C1() );
    insert( new C2() );
end

rule "multi done 1"
salience -100
no-loop
when
    $obj1 : C1()
then
    T1 x = don( $obj1, T1.class);
    don( x, T2.class);
    System.out.println("multi done applied: 1");
end

rule "multi done 2"
salience -101
no-loop
when
    $t : T2()
    $c : C2()
then
    $t.setC2($c.getC2());
    update($t);
    System.out.println("multi done applied: 2 "+$t);
end

rule "multi done 3"
salience -102
no-loop
when
    $c1 : C1()
    $c2 : C2()
then
    T1 x1 = don( $c1, T1.class);
    T2 x2 = don( $c2, T2.class);
    ////don( x1, x2); it is wrong
    System.out.println("multi done applied***");
end
